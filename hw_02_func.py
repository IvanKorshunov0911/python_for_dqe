# libs import
import string
import random


# Generate dict consist of random number of key value pairs where:
#   keys are letters, min_letters_count <= number_of_keys <= max_letters_count
#   values are ints between min_value and max_value
def generate_rand_dict(min_letters_count=2, max_letters_count=26, min_value=0, max_value=100):
    rand_dict = {}
    number_of_keys = random.randint(min_letters_count, max_letters_count)
    for j in range(number_of_keys):
        rand_letter = random.choice(string.ascii_lowercase)
        rand_number = random.randint(min_value, max_value)
        rand_dict.update({rand_letter: rand_number})
    return rand_dict


# Generate list with elements generated by input func and min_elements <= number_of_elements <= max_elements
def generate_rand_list(element_generator, min_elements=2, max_elements=10):
    rand_list = []
    number_of_elements = random.randint(min_elements, max_elements)
    for i in range(number_of_elements):
        list_element = element_generator()
        rand_list.append(list_element)
    return rand_list


# Merge dicts passed as list elements to another dict
def merging_dicts_in_list_to_dict(input_list):
    result_dict = {}
    for letter in string.ascii_lowercase:
        letter_dict = {}
        for i in input_list:
            if letter in i:
                letter_dict.update({letter + '_' + str(input_list.index(i) + 1): i[letter]})
        if len(letter_dict) == 1:
            letter_dict.update({letter: letter_dict.popitem()[1]})
        elif len(letter_dict) > 1:
            max_key = max(letter_dict, key=letter_dict.get)
            letter_dict = {max_key: letter_dict[max_key]}
        result_dict.update(letter_dict)
    return result_dict


result_dict = merging_dicts_in_list_to_dict(generate_rand_list(generate_rand_dict))
print(result_dict)
